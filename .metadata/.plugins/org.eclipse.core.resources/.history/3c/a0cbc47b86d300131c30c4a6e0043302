package ch.phischa;

import java.io.File;
import java.io.IOException;

import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.queryParser.ParseException;
import org.apache.lucene.queryParser.QueryParser;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.util.Version;

public class Searcher {
	
		private static long dauer;
	
		public Searcher(String pfad, String query)
		{
			String indexDir = pfad + File.separator + "Index";
			
			try {
				search(indexDir,query);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		public static void search(String indexDir, String q) throws IOException, ParseException
		{
			Directory dir = FSDirectory.open(new File(indexDir));
			IndexSearcher is = new IndexSearcher(dir);
			QueryParser parser = new QueryParser(Version.LUCENE_30,"filename",new StandardAnalyzer(Version.LUCENE_30));
			Query query = parser.parse(q);
			long start = System.currentTimeMillis();
			TopDocs hits = is.search(query, 100);
			long end = System.currentTimeMillis();
			dauer = end - start;
			
			System.out.println("Gefunden " + hits.totalHits + " in " + dauer + " Millisekunden");
			
			for(ScoreDoc scoredoc : hits.scoreDocs)
			{
				Document doc = is.doc(scoredoc.doc);
				System.out.println(doc.get("fullpath"));
			}
		}
}

package ch.phischa;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;

import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.util.Version;

public class Index {
	
	private IndexWriter writer;
	
	public Index(String pfad)
	{
		String pfadIndex = pfad + File.separator + "Index";
		
		long start = System.currentTimeMillis();
		
		int numIndexed;
		
		try{
			numIndexed = index(pfad,new TextFileFilter());
		} finally {
			close();
		}
		
		long end = System.currentTimeMillis();
		
		System.out.println("Indexed: " + numIndexed + " Files in " + (end - start) + "milliseconds");
	
		Directory dir = FSDirectory.open(new File(pfad));
		StandardAnalyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);
		IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_CURRENT,analyzer);
		
		writer = new IndexWriter(dir,config);
	}
	
	public void close() throws IOException
	{
		writer.close();
	}
	
	public int index(String dataDir, FileFilter filter)
	{
		File[] files = new File(dataDir).listFiles();
		
		for (File f:files)
		{
			if(!f.isDirectory() && !f.isHidden() && f.exists() && f.canRead() && (filter == null || filter.accept(f)))
			{
				indexFile(f);
			}
		}
		
		return writer.numDocs();
	}
	
	
	

}
package ch.phischa;

import java.io.File;
import java.io.FileFilter;
import java.io.FileReader;
import java.io.IOException;

import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.util.Version;

public class Index {
	
	private IndexWriter writer;
	
	public Index(String pfad)
	{
		String pfadIndex = pfad + File.separator + "Index";
		
		long start = System.currentTimeMillis();
		
		int numIndexed;
		
		try{
			numIndexed = index(pfad,new TextFilesFilter());
		} finally {
			try {
				close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		long end = System.currentTimeMillis();
		
		System.out.println("Indexed: " + numIndexed + " Files in " + (end - start) + "milliseconds");
	
		Directory dir;
		try {
			dir = FSDirectory.open(new File(pfad));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		StandardAnalyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);
		IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_CURRENT,analyzer);
		
		try {
			writer = new IndexWriter(dir,config);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void close() throws IOException
	{
		writer.close();
	}
	
	public int index(String dataDir, FileFilter filter)
	{
		File[] files = new File(dataDir).listFiles();
		
		for (File f:files)
		{
			if(!f.isDirectory() && !f.isHidden() && f.exists() && f.canRead() && (filter == null || filter.accept(f)))
			{
				try {
					indexFile(f);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		
		return writer.numDocs();
	}
	
	private static class TextFilesFilter implements FileFilter
	{

		@Override
		public boolean accept(File pathname) {
			// TODO Auto-generated method stub
			return pathname.getName().toLowerCase().endsWith(".mp3");
		}
		
	}
	
	protected Document getDocument(File f) throws Exception
	{
		Document doc = new Document();
		doc.add(new Field("contents",new FileReader(f)));
		doc.add(new Field("filename",f.getName(),Field.Store.YES,Field.Index.NOT_ANALYZED));
		doc.add(new Field("fullpath",f.getCanonicalPath(),Field.Store.YES,Field.Index.NOT_ANALYZED));
		
		return doc;
	}
	
	private void indexFile(File f) throws Exception
	{
		System.out.println("Indexing " + f.getCanonicalPath());
		Document doc = getDocument(f);
		writer.addDocument(doc);
	}
}
package ch.phischa;

import java.io.File;
import java.io.FileFilter;
import java.io.FileReader;
import java.io.IOException;

import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.index.CorruptIndexException;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.util.Version;
import org.jaudiotagger.audio.AudioFile;
import org.jaudiotagger.audio.AudioFileIO;
import org.jaudiotagger.audio.AudioHeader;
import org.jaudiotagger.audio.mp3.MP3AudioHeader;
import org.jaudiotagger.audio.mp3.MP3File;
import org.jaudiotagger.tag.FieldKey;
import org.jaudiotagger.tag.Tag;
import org.jaudiotagger.tag.id3.AbstractID3v2Tag;
import org.jaudiotagger.tag.id3.ID3v1Tag;
import org.jaudiotagger.tag.id3.ID3v24Frames;
import org.jaudiotagger.tag.id3.ID3v24Tag;

public class Index {
	
	public IndexWriter writer;
	long dauer;
	
	public Index(String pfad, String analyzerArt)
	{
		
		switch (analyzerArt) {
		case "Standard Analyzer":
			System.out.println("Chose Standard Analyzer");
		case "Whitespace Analyzer":
			System.out.println("Chose Whitespace Analyzer");
		case "Stop Analyzer":
			System.out.println("Chose Stop Analyzer");
		case "Simple Analyzer":
			System.out.println("Chose Simple Analyzer");
		}
		
		String pfadIndex = pfad + File.separator + "Index";
		int numIndexed = 0;
		try {
			Indexer(pfadIndex);
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		long start = System.currentTimeMillis();

		try{
			numIndexed = index(pfad, new MPFileFilter());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			close();
		}
		
		long end = System.currentTimeMillis();
		
		System.out.println("Indexing " + numIndexed + " in " + (end - start) + " Milliseconds");
		dauer = end - start;
	}
	
	@SuppressWarnings("deprecation")
	public void Indexer(String indexDir) throws IOException
	{
		Directory dir = FSDirectory.open(new File(indexDir));
		writer = new IndexWriter(dir,new StandardAnalyzer(Version.LUCENE_30),true,IndexWriter.MaxFieldLength.UNLIMITED);
	}
	
	public void close()
	{
		try {
			writer.close();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public int index(String dataDir, FileFilter filter) throws Exception
	{
		File[] files = new File(dataDir).listFiles();
		
		for(File f:files)
		{
			if(f.isDirectory())
			{
				index(dataDir+File.separator+f.getName(),filter);
			}
			else if(!f.isHidden() && f.canRead() && f.exists() && (filter == null || filter.accept(f)))
					
			{
				indexFile(f);
			}
		}
		
		return writer.numDocs();
	}
	
	private static class MPFileFilter implements FileFilter
	{
		public boolean accept(File path)
		{
			return path.getName().toLowerCase().endsWith("mp3");
		}
	}
	
	protected Document getDocument(File f) throws Exception
	{
		AudioFile audioFile = AudioFileIO.read(f);
		Tag tag = audioFile.getTag();
		AudioHeader header = audioFile.getAudioHeader();
		
		System.out.println(tag.getFirst(FieldKey.ARTIST));
		
		Document doc =  new Document();
		doc.add(new Field("filename",f.getName(),Field.Store.YES,Field.Index.NOT_ANALYZED));
		doc.add(new Field("fullpath",f.getCanonicalPath(),Field.Store.YES,Field.Index.NOT_ANALYZED));
		doc.add(new Field("KÃ¼nstler",tag.getFirst(FieldKey.ARTIST),Field.Store.YES,Field.Index.ANALYZED));
		doc.add(new Field("Album",tag.getFirst(FieldKey.ALBUM),Field.Store.YES,Field.Index.ANALYZED));
		doc.add(new Field("Titel",tag.getFirst(FieldKey.TITLE),Field.Store.YES,Field.Index.ANALYZED));
		doc.add(new Field("Jahr",tag.getFirst(FieldKey.YEAR),Field.Store.YES,Field.Index.ANALYZED));
		
		return doc;
	}
	
	private void indexFile(File f) throws Exception
	{
		System.out.println(f.getName());
		System.out.println("Indexing " + f.getCanonicalPath());
		Document doc = getDocument(f);
		writer.addDocument(doc);
	}
	
	public long getTime()
	{
		return dauer;
	}
}